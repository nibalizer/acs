#!/usr/bin/env bash

set -eu

# Just in case `acs` is symlinked, we want to resolve the actual path to find
# the acs-start-* scripts
ACS_DIR="$(dirname "$(realpath "$(command -v "$0")")")"

function usage() {
  command_name=$(basename "$0")
  echo "Usage: $command_name start <dir> [-s|--scaffold-id <scaffold-id>] [-a|--agent <agent>] [-n|--network <docker network>]"
  echo "       $command_name resume <scaffold-id> [-t|--thread-id <thread-id>] [-n|--network <docker network>]"
  echo "       $command_name clear <all|scaffold-id>"
  echo "       $command_name list"
  echo "       $command_name help"
  echo ""
  echo "Commands:"
  echo "       start:  <dir> is the directory to scaffold, e.g. /home/user/project"
  echo "               -s|--scaffold-id <scaffold-id> is an optional unique identifier for the scaffold"
  echo "               -a|--agent <agent> is the agent to use, e.g. amp or claude"
  echo "       resume: resumes an existing scaffold with the given scaffold-id"
  echo "               -t|--thread-id <thread-id> is an optional amp thread ID to resume"
  echo "       clear:  clears one or all ai code scaffolds"
  echo "       list:   lists all ai code scaffolds"
  echo "       help:   shows this help message"
}

function list_scaffolds() {
  if [ -d ~/.acs ]; then
    echo "Listing all ai code scaffolds:"
    ls -l ~/.acs
  else
    echo "No ai code scaffolds found"
  fi
}

function clear_scaffold() {
  local scaffold_id="${1:-}"
  if [ -z "$scaffold_id" ]; then
    echo "Error: Scaffold ID or 'all' is required for clearing"
    usage
    exit 1
  fi
  if [ "$scaffold_id" = "all" ]; then
    echo "Clearing all ai code scaffolds..."
    if [ ! -d ~/.acs ]; then
      echo "No ai code scaffolds found to clear"
      return
    fi
    for dir in ~/.acs/*; do
      echo "Unmounting and removing scaffold at: $dir"
      sudo umount "$dir/merged" || true
      rm -rf "$dir"
    done
    echo "All scaffolds cleared"
    return
  fi
  if [ -d ~/.acs/"$scaffold_id" ]; then
    echo "Clearing scaffold with ID: $scaffold_id"
    dir=~/.acs/"$scaffold_id"
    sudo umount "$dir/merged" || true
    rm -rf "$dir"
    echo "Scaffold with ID '$scaffold_id' cleared"
  else
    echo "Error: Scaffold ID '$scaffold_id' does not exist"
  fi
}

function resume_agent() {
  local scaffold_id="${1:-}"
  if [ -z "$scaffold_id" ]; then
    echo "Error: Scaffold ID is required for resuming"
    usage
    exit 1
  fi
  if [ ! -d ~/.acs/"$scaffold_id" ]; then
    echo "Error: Scaffold ID '$scaffold_id' does not exist"
    exit 1
  fi

  local runagent="${AGENT:-amp}"
  local runagent_script
  runagent_script="$ACS_DIR/acs-start-${runagent}.sh"



  if [ ! -x "$(command -v "$runagent_script")" ]; then
    echo "Error: acs-start-${runagent}.sh script not found. Please ensure it is in your PATH or pick a different agent"
    exit 1
  fi

  if [ -z "$THREAD_ID" ]; then
    echo "Resuming scaffold with ID: $scaffold_id"
    NETWORK=${NETWORK:-""} "$runagent_script" ~/.acs/"$scaffold_id"/merged
  else
    echo "Resuming scaffold with ID: $scaffold_id and thread ID: $THREAD_ID"
    "NETWORK=${NETWORK:-""} $runagent_script" ~/.acs/"$scaffold_id"/merged "$THREAD_ID"
  fi
}

function start_agent() {
  local runagent="${AGENT:-amp}"
  local runagent_script
  runagent_script="$ACS_DIR/acs-start-${runagent}.sh"
  local target_dir
  target_dir="${1:-}"

  if [ -z "$target_dir" ]; then
    echo "Error: Directory to scaffold for agent is required"
    usage
    exit 1
  fi
  if [ ! -d "$target_dir" ]; then
    echo "Error: Target directory '$target_dir' does not exist"
    exit 1
  fi
  if [ ! -x "$(command -v "$runagent_script")" ]; then
    echo "Error: acs-start-${runagent}.sh script not found. Please ensure it is in your PATH or pick a different agent"
    exit 1
  fi
  if [ ! -d ~/.acs ]; then
    echo "Creating directory for ai code scaffolds: ~/.acs"
    mkdir -p ~/.acs
  fi

  scaffoldID=${SCAFFOLD_ID:-$(uuidgen -7)}

  slug="$HOME/.acs/$scaffoldID"
  if [ ! -d "$slug" ]; then
    echo "Creating ai code scaffold for $target_dir"
    mkdir -p "${slug}"/{upperdir,workdir,merged}
  else
    echo "Error: Scaffold ID '$scaffoldID' already exists. Please choose a different ID or clear or resume the existing scaffold."
    exit 1
  fi

  sudo mount -t overlay overlay -o "lowerdir=${target_dir},upperdir=${slug}/upperdir,workdir=${slug}/workdir" "${slug}/merged"

  echo "overlay created!"
  echo "close overlay with umount ${slug}/merged"
  echo "changes will be tracked here ${slug}/upperdir"
  echo "do your work here:"
  echo "${slug}/merged"

  NETWORK=${NETWORK:-""} "$runagent_script" "$slug"/merged

  echo "Work is ready for review here:"
  echo "${slug}/merged"
}

# Parse command line flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    -s|--scaffold-id)
      if [[ -z "${2:-}" ]]; then
        echo "Error: --scaffold-id requires an argument"
        usage
        exit 1
      fi
      SCAFFOLD_ID="$2"
      shift
      shift
      ;;
    -a|--agent)
      if [[ -z "${2:-}" ]]; then
        echo "Error: --agent requires an argument"
        usage
        exit 1
      fi
      AGENT="$2"
      shift
      shift
      ;;
    -n|--network)
      if [[ -z "${2:-}" ]]; then
        echo "Error: --network requires an argument"
        usage
        exit 1
      fi
      NETWORK="$2"
      shift
      shift
      ;;
    -t|--thread-id)
      if [[ -z "${2:-}" ]]; then
        echo "Error: --thread-id requires an argument"
        usage
        exit 1
      fi
      THREAD_ID="$2"
      shift
      shift
      ;;
    *)
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done
set -- "${POSITIONAL_ARGS[@]}"

# Parse positional arguments
COMMAND="${1:-}"
if [ -z "$COMMAND" ]; then
  usage
  exit 1
fi
shift
case "$COMMAND" in
  start)
    start_agent "$@"
    exit 0
    ;;
  resume)
    resume_agent "$@"
    exit 0
    ;;
  clear)
    clear_scaffold "$@"
    ;;
  list)
    list_scaffolds
    exit 0
    ;;
  help)
    usage
    exit 0
    ;;
  *)
    echo "Error: Invalid command '$COMMAND'"
    usage
    exit 1
    ;;
esac

